# 应用名称
spring.application.name=springcloud-demo

# 应用服务 WEB 访问端口
server.port=8088


#下面这些内容是为了让MyBatis映射
#指定Mybatis的Mapper文件
mybatis-plus.mapper-locations=classpath:mappers/*xml
mybatis-plus.global-config.db-config.logic-not-delete-value=1
mybatis-plus.global-config.db-config.logic-delete-value=0
mybatis-plus.config-location=classpath:mybatis/mybatis-config.xml
mybatis-plus.type-handlers-package=com.ghost.springcloud.common.mybatis.encrypt

# Sentinel 控制台地址
spring.cloud.sentinel.transport.dashboard=localhost:8080
spring.cloud.sentinel.transport.port=8719
#spring.cloud.sentinel.transport.client-ip=localhost
# 取消Sentinel控制台懒加载
# 默认情况下 Sentinel 会在客户端首次调用的时候进行初始化，开始向控制台发送心跳包
# 配置 sentinel.eager=true 时，取消Sentinel控制台懒加载功能
spring.cloud.sentinel.eager=true
# 如果有多套网络，又无法正确获取本机IP，则需要使用下面的参数设置当前机器可被外部访问的IP地址，供admin控制台使用
# spring.cloud.sentinel.transport.client-ip=
#spring.cloud.sentinel.transport.clientIp=192.168.1.104

spring.mvc.converters.preferred-json-mapper=gson

#控制台推送规则到nacos
spring.cloud.sentinel.datasource.flow.nacos.server-addr=${nacos.server-addr}
spring.cloud.sentinel.datasource.flow.nacos.username=${nacos.username}
spring.cloud.sentinel.datasource.flow.nacos.password=${nacos.password}
spring.cloud.sentinel.datasource.flow.nacos.namespace=${nacos.namespace}
spring.cloud.sentinel.datasource.flow.nacos.dataId=${spring.application.name}-flow-rules
spring.cloud.sentinel.datasource.flow.nacos.groupId=SENTINEL_GROUP
spring.cloud.sentinel.datasource.flow.nacos.rule-type=flow
spring.cloud.sentinel.datasource.degrade.nacos.server-addr=${nacos.server-addr}
spring.cloud.sentinel.datasource.degrade.nacos.username=${nacos.username}
spring.cloud.sentinel.datasource.degrade.nacos.password=${nacos.password}
spring.cloud.sentinel.datasource.degrade.nacos.namespace=${nacos.namespace}
spring.cloud.sentinel.datasource.degrade.nacos.dataId=${spring.application.name}-degrade-rules
spring.cloud.sentinel.datasource.degrade.nacos.groupId=SENTINEL_GROUP
spring.cloud.sentinel.datasource.degrade.nacos.rule-type=degrade
spring.cloud.sentinel.datasource.system.nacos.server-addr=${nacos.server-addr}
spring.cloud.sentinel.datasource.system.nacos.username=${nacos.username}
spring.cloud.sentinel.datasource.system.nacos.password=${nacos.password}
spring.cloud.sentinel.datasource.system.nacos.namespace=${nacos.namespace}
spring.cloud.sentinel.datasource.system.nacos.dataId=${spring.application.name}-system-rules
spring.cloud.sentinel.datasource.system.nacos.groupId=SENTINEL_GROUP
spring.cloud.sentinel.datasource.system.nacos.rule-type=system
spring.cloud.sentinel.datasource.authority.nacos.server-addr=${nacos.server-addr}
spring.cloud.sentinel.datasource.authority.nacos.username=${nacos.username}
spring.cloud.sentinel.datasource.authority.nacos.password=${nacos.password}
spring.cloud.sentinel.datasource.authority.nacos.namespace=${nacos.namespace}
spring.cloud.sentinel.datasource.authority.nacos.dataId=${spring.application.name}-authority-rules
spring.cloud.sentinel.datasource.authority.nacos.groupId=SENTINEL_GROUP
spring.cloud.sentinel.datasource.authority.nacos.rule-type=authority
spring.cloud.sentinel.datasource.param-flow.nacos.server-addr=${nacos.server-addr}
spring.cloud.sentinel.datasource.param-flow.nacos.username=${nacos.username}
spring.cloud.sentinel.datasource.param-flow.nacos.password=${nacos.password}
spring.cloud.sentinel.datasource.param-flow.nacos.namespace=${nacos.namespace}
spring.cloud.sentinel.datasource.param-flow.nacos.dataId=${spring.application.name}-param-flow-rules
spring.cloud.sentinel.datasource.param-flow.nacos.groupId=SENTINEL_GROUP
spring.cloud.sentinel.datasource.param-flow.nacos.rule-type=param_flow

retry.fiexedWait=10
retry.stopAfterAttempt=60
